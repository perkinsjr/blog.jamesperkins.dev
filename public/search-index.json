[{"slug":"adding-comments-to-the-blog","category":"post","title":"Adding Comments To My Blog","description":"Comments are important to a blog, people love to engage but I did not want to pay for a service, or invade my readers with ads or tracking.","tags":["nextjs","features","comments"],"body":"\nComments are important to a blog, people love to engage but I did not want to pay for a service, or invade my readers with ads or tracking everything they do. I want to improve the quality of the blog and comments felt like the right direction, allowing people to commment and let me know how they felt about each post.\n\n## What did I pick?\n\nI chose Utteranc which is a lightweight comments widget built on GitHub issues. It uses GitHub to allow people to comment on a blog post, they just sign in with the GitHub and can comment away.\n\n### Why did I pick Utteranc?\n\n1. It's 100% open source\n2. No ads, no tracking\n3. Git backed (Means I keep the comment data)\n4. Extremely lightweight\n\n### How Did I implement this on NextJS?\n\nI decided to go with a hook that is referenced in a component. I could of just implemented an async script but where is the fun in that?\n\nBelow is the hook code:\n\n```javascript\nimport { useEffect } from \"react\";\n\nexport const useUtterances = (commentNodeId) => {\n  useEffect(() => {\n    const scriptParentNode = document.getElementById(commentNodeId);\n    if (!scriptParentNode) return;\n    const script = document.createElement(\"script\");\n    script.src = \"https://utteranc.es/client.js\";\n    script.async = true;\n    script.setAttribute(\"repo\", \"REPO_NAME\");\n    script.setAttribute(\"issue-term\", \"pathname\");\n    script.setAttribute(\"label\", \"comment :speech_balloon:\");\n    script.setAttribute(\"theme\", \"github-light\");\n    script.setAttribute(\"crossorigin\", \"anonymous\");\n\n    scriptParentNode.appendChild(script);\n\n    return () => {\n      // cleanup - remove the older script with previous theme\n      scriptParentNode.removeChild(scriptParentNode.firstChild);\n    };\n  }, [commentNodeId]);\n};\n```\n\nThis creates a script that is async and fills in all the important pieces needed to make it work with utterance. This is also extendable so technically I could implement useState and change the theme based upon dark or light mode.\n\nThe component then takes the hook and then returns an div ready for comments:\n\n```javascript\nimport { useUtterances } from \"../lib/useUtterances\";\n\nconst commentNodeId = \"comments\";\n\nconst Comments = () => {\n  useUtterances(commentNodeId);\n  return <div id={commentNodeId} />;\n};\n\nexport default Comments;\n```\n\nNow I can reference it anywhere in my application and it will show up using `<Comments/>`\n"},{"slug":"create-content-to-solidify-your-knowledge","category":"post","title":"Create content to solidify your knowledge","description":"Creating content on something you just learned such as a youtube video or a blog post is another way to solidify your knowledge.","tags":["opinions"],"body":"\nCreating content on something you just learned such as a youtube video or a blog post is another way to solidify your knowledge. It allows for a greater understanding by teaching another about the topic.\n\nSocial media / YouTube is a strange place, it shows the best of everything. I guarantee if you look at the topmost followed content creators in our industry, you will see a post or a YouTube video. This video or blog post will be error-free and edited to perfection. Insert Chef Kiss here!\n\nAs a content creator, I can tell you outside of basic JamStack content and NextJS, when I teach a topic I have spent somewhere between 1-4 weeks researching and playing with the tech before creating a YouTube video.\n\nMy skills to digest and extract details are no different than anyone else. I don't have a special skill set that allows me to become an expert in a field after only using it for one day. I play with the technology and see if I like it and do I think it would bring value to others in the industry.\n\nIf I believe in the topic or technology, I write a script, write some code and turn on the camera. Then the rest is history!\n\nNext time you learn a topic, try writing a blog post and see how much more you retain.\n"},{"slug":"daisyui-make-tailwind-components-with-ease","category":"post","title":"DaisyUI - Make Tailwind components with ease!","description":"DaisyUI allows you to bring the power of tailwind into clean concise components. ","tags":["tutorial","tailwind","css"],"body":"\nWhen TailwindCSS hit the world, developers were brought to a world of utility classes. Allowing them to move swiftly and produce amazing looking content. I've always found Tailwind to be messy, hard to follow, and bloats code lines. This is fine if you spend a lot of time with Tailwind as with any language you learn the syntax, but I am always looking for an easy way to do something... Which is where Daisy UI comes in.\n\n### Prefer Video?\n\n[![DaisyUI Video ](https://img.youtube.com/vi/hM9fENyAquM/maxresdefault.jpg)](https://www.youtube.com/watch?v=hM9fENyAquM) \n\n\n## What is DaisyUI?\n\nDaisyUI is a Tailwind plugin that allows you to create Clean HTML with component classes, that is built on pure CSS. It also has themes that we all love like `dracula` , `dark` , `cupcake` . In other words no need to deal with 100s of utility classes to create something, but you still have access to them.\n\n## How to setup DaisyUI?\n\nDaisyUI is a tailwind plugin, so it requires minimal setup. First step, make sure you have a project setup with tailwindCSS. Then install DaisyUI\n\n```shell\nnpm i daisyui\n```\n\nThen the final step is to register DaisyUI as a plugin in your `tailwindcss.config`\n\n```javascript\nmodule.exports = {\n...\n    plugins: [\n      require('daisyui'),\n    ],\n...\n  }\n```\n\nNow you are ready to start using it.\n\n## DaisyUI vs Utility Classes\n\n### A button\n\nWhat makes DaisyUI so appealing is the ability to cut down the amount of classes added to an element for example a button:\\\n\\\nIn Tailwind to create a link that is a rounded button that is purple it would look similar to this :\n\n```html\n<a\n  class=\"inline-block px-4 py-3\n    text-sm font-semibold text-center\n    text-white uppercase transition\n    duration-200 ease-in-out\n    bg-indigo-100 rounded-md\n    cursor-pointer\n    hover:bg-indigo-600\"\n  >Button</a\n>\n```\n\nWhich is a lot for a button, sure you could make this into a reusable component but if someone came along and read this there is a lot to read through before fully comprehending what is happening. \\\n\\\nIn DaisyUI you can set a link as a rounded button with 5% of the code used above for example:\n\n```javascript\n<a class=\"btn btn-primary\">Button</a>\n```\n\n### Toggle Switches\n\nIf you wanted a toggle switch in Tailwind you would have to write something similar:\n\n```\n<div class=\"relative\">\n    <input type=\"checkbox\" class=\"peer\n    appearance-none cursor-pointer\n    border border-gray-300 rounded-full\n    checked:border-gray-900 w-12 h-7\"/>\n    <span class=\"peer-checked:left-6\n    peer-checked:bg-gray-900\n    transition-all duration-500\n    pointer-events-none w-5 h-5\n    block absolute top-1 left-1\n    rounded-full bg-gray-300\"></span>\n  </div>\n```\n\nAgain hard to parse unless you are truly using Tailwind frequently. In Daisy UI it's again much smaller\n\n```\n<input type=\"checkbox\" class=\"toggle\"/>\n\n```\n\n## My Thoughts\n\nAs a big fan of Chakra-UI it's hard to get me to pull away from such a beautiful component based framework that I am so familiar with. DaisyUI will almost guarantee that in the future I will be checking out TailwindCSS for projects, it's use of extendable components reduces the barrier of entry, an important requirement in 2021.\n"},{"slug":"dev-rel-what-do-we-do","category":"post","title":"Dev rel what do we do?","description":"Developers relations / advocacy is a role that is a mix of Sales, Marketing, Developer and Educator. Our role at any company is too encourage developers to adopt a platform, but, more importantly in my opinion is making developers successful.","tags":["thoughts","devrel"],"body":"\n## What is Developer Relations?\n\nDevelopers relations / advocacy is a role that is a mix of Sales, Marketing, Developer and Educator. Our role at any company is too encourage developers to adopt a platform, but, more importantly in my opinion is making developers successful.\n\n### What do developers relations do?\n\nEach dev rel might have different goals but for me and quite a few people I know in the space do the following week to week:\n\n1. Check GitHub issues\n2. Communicate via Discord, forums, Slack and Twitter.\n3. Create content through YouTube, Twitch, Blog posts\n4. Update guides and documentation\n5. Feed the feedback loop machine\n6. Test new features to be up to date\n7. Collaborate with others\n8. Conferences\n\nIt might sound like no one person can do all of these, but developer relations do all these and some times more.\n\n### Are Developer Relations Technical roles?\n\nI get this question frequently, why did you leave being a developer to be a dev rel? Surely you weren't a very good developer if you wanted to leave a technical position. I and many other Dev Rels are extremely technical, in fact some are more technical then hired engineers, what makes us different is the ability to translate highly technical implementations into something that anyone can understand.\n\nImagine if you were a mechanic and had to explain how an engine works in great detail so anyone could rebuild an engine on their own. _This is what we do_ we allow developers build their own engines successfully!\n\n### Who Can be a Dev Rel?\n\nI think anyone can be a Dev Rel, if they are interested in educating, marketing and creating success for developers. The role can quite a challenge and involves a lot of being out of your comfort zone, which to me is exciting!\n\n### Resources for Dev Rel\n\nLooking for resources well I have a few to help you get on the way to success:\n\n- [How to Start Doing Dev Rel Right now](https://samjulien.hashnode.dev/how-to-start-doing-dev-rel-right-now-cknoolj8l0lynlps12kqvdkvj)\n- [Getting Started in Developer Relations](https://learn.samjulien.com/getting-started-in-developer-relations)\n- [7 Resources To Get Started With Developer Relations - Dev Rel, Dev Advocate, Dev Evangelism](https://catalins.tech/7-resources-to-get-started-with-developer-relations-dev-rel-dev-advocate-dev-evangelism)\n"},{"slug":"developers_hangout_update","category":"post","title":"Developers Hangout Podcast Update","description":"The Developers Hangout podcast has been rocking and rolling for almost two months. I've had some fantastic guests and have some even greater ones coming in the future.","tags":["update","developers hangout","podcast"],"body":"\nThe Developers Hangout podcast has been rocking and rolling for almost two months. I've had some fantastic guests and have some even greater ones coming in the future.\n\nWhen I first started Developers Hangout podcast, I wanted it to be a live show that people could tune in to and watch. What I realized was this was not sustainable, as only a few of the thousands of developers in the world could be available at 3.30PM EST.\n\n### What is happening now?\n\nThe Developers Hangout podcast is going to go from a Livestreamed show to prerecorded. It is also getting it's own YouTube Channel, so people can watch the episodes as they wish without filling my own [YouTube channel](https://www.youtube.com/channel/UCYdDqh_PytPOGznQ1RxzW8g) of podcast episodes.\n\nThe show now has it's own [website](https://developershangoutpodcast.com/) which you can listen to the audio versions of and find show notes and links to the developers projects or socials.\n\n### What can you do to support me?\n\nWell first leave a review if you have listened to the show on Apple podcast or wherever you listen to the show! If you aren't listening, how about considering checking it out, we have had some interesting stories so far and I think you'd learn a lot.\n\nConsidering support both the YouTube Channel and Podcast via [Buy Me a Coffee](https://www.buymeacoffee.com/jamesperkins).\n\nI am looking forward to interviewing more developers, so if you have someone in mind please don't hesitate to let me know.\n"},{"slug":"embracing-typescript","category":"post","title":"Why I embraced Typescript for development.","description":"I've been very much avoiding using Typescript for quite a while, not because I don't believe in statically typed software, I spent a decade in production Java and was a certified PERL developer. I just never found a reason to use it, being a content creator and Jamstack developer for the past 3 years I have just been using JavaScript without much issue. If I ended up working on a project with typescript I just understood the system coded and moved on. ","tags":["thoughts","tutorial","typescript"],"body":"\nI've been very much avoiding using Typescript for quite a while, not because I don't believe in statically typed software, I spent a decade in production Java and was a certified PERL developer. I just never found a reason to use it, being a content creator and Jamstack developer for the past 3 years I have just been using JavaScript without much issue. If I ended up working on a project with typescript I just understood the system coded and moved on.\n\n## How did I end up embracing it?\n\nWhen I started writing Collabstream, I wrote an early implementation in JavaScript that used about 30 components, and a half dozen hooks with a bunch of API calls that required specific types. I was trying to pass props and data around and at least 30% of the time I was struggling to keep what variable type was supposed to where. I managed to finish the early POC but probably added hours of development time for no reason. I decided the POC worked really well but the code was an absolute mess, it was probably the worst \"production\" code I've written. I am okay with this, POC's sometimes need to be dirty to see if what you originally came up with works and can scale. One of the two was true, it worked but the scaling in it's current form would make any dev team run off and live in a hut in the woods with no electricity.\nI immediately made the decision to move to typescript so I could make it easy to scale and easy to find issues without deploying these changes. I started the rewrite and it was easy to convert the already written JavaScript into TypeScript and make the scaling changes as I went.\n\n## Do I use it on every project?\n\nThis is a simple answer, no. It has a time and a place, and I evaluate it on a case by case basis with a few simple questions:\n\n1. Am I making a tutorial?\n2. Does this need scale?\n3. Is this a node package?\n\nI will never make a tutorial in TypeScript unless is a specific tutorial on Typescript as it makes the barrier to entry higher. If it's a node package, it makes sense to be in TypeScript as it provides auto completion of what I am expecting.\n\n### Thinking of learning TypeScript?\n\nIf you are thinking of learning TypeScript here are a few resources:\n\n- [TypeScript Lang](https://www.typescriptlang.org/docs/)\n- [Learn Typescript basics in 5 ](https://www.freecodecamp.org/news/learn-typescript-in-5-minutes-13eda868daeb/)\n"},{"slug":"force-reload-next-pages","category":"post","title":"Force Reload Next.js Pages","description":"Sometimes you need to just force reload a page in Next.js, lets look at a couple ways you can do this!","tags":["tutorial","nextjs"],"body":"\nIn some circumstances, you might need to force refresh a page, maybe you have data that needs to be fetched from the server but aren't using a Stale While Revalidating method. For example a user profile page, where a user might update a password or email.\n\nPrefer a video? Check below\n\n%[https://youtu.be/ouEPm91TlTI]\n\n### When in a component\n\nWhen you are in a component, Next.js has the `useRouter` hook that allows you to, well, hook into the router functionality. When using the hook you can do the following\n\n```javascript\nimport { useRouter } from \"next/router\";\n\nexport default function myComponent() {\n  const router = useRouter();\n\n  router.reload();\n}\n```\n\n### When you aren't in a component\n\nThere are on occasion where you might be out of a component, such as a utility or something similar. You can still force the reload, but you can't use the hook to do this. Instead you can still use the router functionality:\n\n```javascript\nimport Router from \"next/router\";\n\nRouter.reload();\n```\n\nThis will force the reload but without the hook, allowing you to do it wherever you need it outside of component function.\n"},{"slug":"how-i-setup-next-projects","category":"post","title":"How I setup Next.js Projects","description":"I create 100s of Next projects a year, and I have a particular way of setting everything up. It might be for you, it might not.","tags":["tutorial","nextjs"],"body":"\nNext.js is probably my favorite framework... Although Astro is slowly creeping into the picture. I create 100s of projects a year using Next.js and set them up the same way every single time. \n\nNext.js does a lot of the handling of structure, `pages` stay under the `/pages` folder. API routes stay under the `/pages/api` folder. Publicly visible files under `/public`.\n\nWith API routes I do something that I saw one time and have done every since I create a folder for each route versus naming the file the route:\n\n```javascript\n// what I see people do\n/pages/api/authentication.js\n// What I do\n/pages/api/authentication/index.js\n```\nThis to me feels like a really clean way to keep API routes and makes you really think about names and usage. \n\n## What Do I do with the rest?\n\nAll the React components required by pages are in a `/components` folder. Then I create component structure based upon usage for example:\n\n- `/components/Auth/[filename].js`\n- `/components/Layout/[filename].js`\n- `/components/Checkout/[filename].js`\n\nThen I have a `utils` folder that contains all the utilities used by the React components or the API routes. THings that live in here could be database intializers, fetchers, cryptography etc.\n\nThen the final piece to my setup, that makes everything easy, my `jsconfig.json` which allows me to user `@components/[component]/[filename]` or `@util/fauna.js` and the setup looks like this:\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"],\n      \"@/utils/*\" :[\"utils/*\"]\n    }\n  }\n}\n```\nThis is the base structure I use for every single project, naturally if I have content for a blog for example, I create a `content` folder.\n\nThis is a nice clean setup and allows me to work quickly and without much thought, it's also great for context switching because every project is the same. "},{"slug":"i-treat-debugging-as-a-murder-mystery","category":"post","title":"I treat debugging as a murder mystery","description":"I have spent so much of my career debugging code, whether its Production code in a large scale enterprise applications or in my own personal code. Every time I start debugging I treat it as a murder mystery. ","tags":["debugging","tutorial","thoughts"],"body":"\nI have spent so much of my career debugging code, whether its Production code in a large scale enterprise applications or in my own personal code. Every time I start debugging I treat it as a murder mystery. I follow the same 6 steps to almost all of my debugging as it allows maximum throughput for me.\n\n1. Figure Out What Changed.\n2. Eliminate One Possibility Each Time.\n3. Focus on code changes.\n4. Use the Google.\n5. Take Notes and Share New Information.\n6. Pay Attention to other Developers Suggestions.\n\nSometimes you can skip some steps but the first 2 are must do's if you can narrow down to a single change in file a, then you know file a introduced the bug.If you have multiple changes elimating each change will allow you to swiftly move through the issue and come to a solution.\n\nI followed this idea for years and it has never let me down, next time you are debugging try thinking it's a murder mystery!\n"},{"slug":"next-link-open-new-tab","category":"post","title":"How to open a link in a new tab","description":"Next Link has made links easier for developers, but what if you need to open a external link in a new tab?","tags":["tutorial","nextjs"],"body":"\nNext Link is one of my favorite features of Next.js, when it launched I was impressed with the team over Vercel when they handled internal versus external links. \n\n## The Problem\n\nNext Link wraps an `a` when using a link and you pass the `href` along so where does the target=\"_blank\" go? Here is an example of Next Link:\n\n```javascript\n<Link href={url}>\n  <a>Click this link</a>\n</Link>\n```\n\n## The Solution\n\nThe solution is to keep the actions on the `a` tag, and the `href` on the `Link` so it plays nicely with CSR (Client side routing) for example:\n\n```javascript\n<Link href={url}>\n  <a target=\"_blank\">Click this link</a>\n</Link>\n```\n\n"},{"slug":"nextjs-faunadb-crash-course","category":"post","title":"NextJS + FaunaDB Crash Course","description":"Welcome to my latest blog post, which is a crash course on NextJS and Fauna, in this blog post I am going to show you how to Create a Database, Read from that database and finally update the collection.","tags":["nextjs","tutorial","faunadb"],"body":"\nWelcome to my latest blog post, which is a crash course on NextJS and Fauna, in this blog post I am going to show you how to Create a Database, Read from that database and finally update the collection.\n\n### The Setup\n\nTo begin with lets create a database, and prepopulate it with test data. Firstly sign up or login to your fauna account and click Create new database and you should have a screen that looks like this:\n\n![2020-10-14 19_38_57-.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1602718757001/_SfuWQZFj.png)\n\nGive your database a name, for this I am going to name it next-with-fauna and click the Pre-populate with demo data, and press save. After a few seconds you should now be able to see a dashboard, with collections on one side and indexes on the other. You are now ready to start coding.\n\n#### Create our next app\n\nOpen up your favorite editor and type in\n\n```bash\nnpx create-next-app next-with-fauna\n```\n\nOnce the pre-population has occurred remove everything inside your `/pages/index.js`, return function so only a single div remains, and go ahead and remove the hello.js from your `/pages/api/` .\n\n```javascript\nexport default function Home() {\n  return <div></div>;\n}\n```\n\n#### Install faunadb\n\nWe also need to install fauna through NPM so we can use their great client.\n\n```bash\nnpm install faunadb\n```\n\n#### Create a key for faunadb\n\nWe also need a key to be able to tell fauna who we are when we are attempting to talk to our database. So go back to your dashboard, and select Security , click the big green New Key button, make sure the database is the one you are using and hit save. Below is what you we see, except the big black bar will be your key.\n\n![fauna key.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1602719975608/amaJMtDdQ.png)\n\nAdd a .env file with the following name `FAUNADB_SECRET_KEY=<YOUR_SECRET_KEY>`\n\n#### Vercel setup\n\nFirstly we need to install vercel-cli to be able to use vercel dev(trust me its amazing).\n\n```bash\nnpm i -g vercel\n```\n\nThen go ahead and login to your vercel account by typing\n\n```bash\nvercel\n```\n\nOnce you have logged in, you can add the FAUNADB_SECRET_KEY so if you deploy it will automatically know to read this from your vercel account instead of .env\n\n```bash\nvercel add secrets FAUNADB_SECRET_KEY <YOUR_SECRET_KEY>\n```\n\nNow we are ready!\n\n### Creating our first serverless function.\n\nTo begin this coding journey, lets start with the serverless function that will get all our customers from our database, under your /api/ directory create a new folder called customerData and inside that folder create a index.js file.\n\nFirst we will start by importing faunadb, our secret and the faunadb client which will set us up to start making request.\n\n```javascript\n// import faunadb from node\nconst faunadb = require(\"faunadb\");\n\n// use our secret\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\n\n// use the faunadb query\nconst q = faunadb.query;\n\n// create our client using our secret\nconst client = new faunadb.Client({ secret });\n```\n\nA serverless function starts the same way each time `module.exports = async (req, res) => {}` so we are going to add that to our file and start our requests.\n\n```javascript\n// import faunadb from node\nconst faunadb = require(\"faunadb\");\n\n// use our secret\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\n\n// use the faunadb query\nconst q = faunadb.query;\n\n// create our client using our secret\nconst client = new faunadb.Client({ secret });\n\n// start of our requests\nmodule.exports = async (req, res) => {};\n```\n\nUsing fauna is probably different than other databases you have interacted with and that's because its built for the JAM. Lets create the request and then we can explain it step by step:\n\n```javascript\n// import faunadb from node\nconst faunadb = require(\"faunadb\");\n\n// use our secret\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\n\n// use the faunadb query\nconst q = faunadb.query;\n\n// create our client using our secret\nconst client = new faunadb.Client({ secret });\n\nmodule.exports = async (req, res) => {\n  try {\n    const dbs = await client.query(\n      q.Map(\n        // iterate each item in result\n        q.Paginate(\n          // make paginatable\n          q.Match(\n            // query index\n            q.Index(\"all_customers\") // specify source\n          )\n        ),\n        (ref) => q.Get(ref) // lookup each result by its reference\n      )\n    );\n    // ok\n    res.status(200).json(dbs.data);\n  } catch (e) {\n    // something went wrong\n    res.status(500).json({ error: e.message });\n  }\n};\n```\n\nInside the try we are creating a constant called dbs which makes a request using the fauna db client, we then create the actual query.\n\n```javascript\nq.Map(\n  // iterate each item in result\n  q.Paginate(\n    // make paginatable\n    q.Match(\n      // query index\n      q.Index(\"all_customers\") // specify source\n    )\n  ),\n  (ref) => q.Get(ref) // lookup each result by its reference\n);\n```\n\nThe Map returns a new array with the results of calling the lambda function on each item in array, or as I put it, iterates each item in the result. The Paginate function takes the Ref on the last line, and returns a page of results. The Match function finds the \"search terms\" provided to Match, which in our case is the index called (\"all_customers\").\n\nThen the `(ref) => q.Get(ref)` looks up each result by the referenced above. Finally the dbs will be full of customers! If all goes well we will return `res.status(200).json(dbs.data);` which will be our array of customers.\n\n#### Using our serverless function\n\nNow we have a serverless function we should test it out before creating any UI code, inside your `/pages/index.js` we are going to add some state and use the useEffect. So at the top import in `import { useEffect, useState } from \"react\";` and then we can start creating our request.\n\n```javascript\nimport { useEffect, useState } from \"react\";\n\nexport default function Home() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {}, []);\n\n  return <div></div>;\n}\n```\n\nNow we have data which is a state that is an empty array, and useEffect ready to call our serverless function. Lets create a function called getCustomerData that requests our data and we can reuse this later once we add a new customer.\n\n#### Calling the serverless function\n\nNextJS is built for serverless functions, and we can create an async function to do this without any special code, all we need is a simple fetch request.\n\n```javascript\nasync function getCustomerData() {\n  const res = await fetch(\"/api/customerData\");\n  const newData = await res.json();\n  setData(newData);\n}\n```\n\nThis async function makes a request to our api, then updates the state to contain the customer information. Now we are finally ready to make this request! Go ahead and add `getCustomerData()` to the useEffect and we can test, to make sure you are all in the same below here is our current code.\n\n```javascript\nimport { useEffect, useState } from \"react\";\n\nexport default function Home() {\n  const [data, setData] = useState([]);\n\n  async function getCustomerData() {\n    const res = await fetch(\"/api/customerData\");\n    const newData = await res.json();\n    setData(newData);\n  }\n\n  useEffect(() => {\n    getCustomerData();\n  }, []);\n\n  return <div></div>;\n}\n```\n\n### Launching our code using vercel dev.\n\nNow we are ready to launch our code, go ahead and use `vercel dev ` and navigate to localhost:3000 and you should see **NOTHING** on your screen.\n\nGo ahead and open your developer tools, navigate to your network tab and look for GetCustomerData request, and look inside you should see a response that contains all our customer data.\n\n### Using Chakra UI to see the data\n\nNow Chakra UI is my choice of frameworks for React based frameworks, due to composition and if follows WAI-ARIA standards.\n\n#### Installing ChakraUI\n\nTo install ChakraUI use the following:\n\n```bash\nnpm install @chakra-ui/core @emotion/core @emotion/styled emotion-theming\n```\n\nThen inside your `_app.js` we are going to wrap it in a ThemeProvider and CSS Reset, this will cause it to reset default CSS styling, and allow us to use all the great features of ChakraUI. Your `_app.js` file by the end should look like this:\n\n```javascript\nimport { ThemeProvider, CSSReset } from \"@chakra-ui/core\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Component {...pageProps} />\n    </ThemeProvider>\n  );\n}\n\nexport default MyApp;\n```\n\nThen in our `/pages/index.js` file you will need to add some imports, these imports will include the add customer functionality so its going to seem like quite a lot!\n\n```javascript\nimport { useEffect, useState } from \"react\";\nimport {\n  Heading,\n  Flex,\n  Stack,\n  Box,\n  Button,\n  Input,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Radio,\n}from \"@chakra-ui/core\";\n\nexport default function Home() {\nconst [data, setData] = useState([]);\n\nasync function getCustomerData() {\n      const res = await fetch(\"/api/customerData\");\n      const newData = await res.json();\n      setData(newData);\n    }\n\nuseEffect(() => {\ngetCustomerData();\n  }, []);\n\n  return (<div></div>);\n}\n...\n```\n\n#### Displaying the data to the user.\n\nNow we have Chakra UI installed we can use this to display the customer data in the UI. To begin with lets create a Heading and sub heading, in ChakraUI we will us the Heading tag and tell it the heading size, so lets add a h1 and h2.\n\n```javascript\nimport { useEffect, useState } from \"react\";\nimport {\n  Heading,\n  Flex,\n  Stack,\n  Box,\n  Button,\n  Input,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Radio,\n} from \"@chakra-ui/core\";\nexport default function Home() {\n\n  const [data, setData] = useState([]);\n\n  async function getCustomerData() {\n    const res = await fetch(\"/api/getCustomers\");\n    const newData = await res.json();\n    setData(newData);\n  }\n\n  useEffect(() => {\n    getCustomerData();\n  }, [])\n\n  return (\n  <div>\n      <Head>\n        <title>Next.js, FaunaDB and Node.js</title>\n      </Head>\n      <Heading as=\"h1\" my={2} textAlign=\"center\">\n        Next.js, FaunaDB and Node.js\n      </Heading>\n      <Heading as=\"h2\" my={2} textAlign=\"center\">\n        Customer Data\n      </Heading>\n</div>\n\n```\n\nAt this point if you look at your site, you should see a H1 and H2 at the top of the page, now we need to add some Flex. Under your Heading add ` <Flex mt={12} align=\"center\" justify=\"center\">`\n\nChakraUI does not have a table component so we are going to create something that looks like a table. ChakraUI has a Stack component that does what it says, stacks elements on top of each other by default. So we can use that with a combination of their Heading to create table row headings which will be Name, Phone, Credit Card.\n\n```javascript\n.....\n <div>\n      <Head>\n        <title>Next.js, FaunaDB and Node.js</title>\n      </Head>\n      <Heading as=\"h1\" my={2} textAlign=\"center\">\n        Next.js, FaunaDB and Node.js\n      </Heading>\n      <Heading as=\"h2\" my={2} textAlign=\"center\">\n        Customer Data\n      </Heading>\n      <Flex mt={12} align=\"center\" justify=\"center\">\n      <Stack>\n          <Heading mb={6} as=\"h4\">\n            Name:\n          </Heading>\n          <Heading mt={6} as=\"h4\">\n            Phone:\n          </Heading>\n          <Heading my={4} as=\"h4\">\n            Credit Card:\n          </Heading>\n        </Stack>\n      </Flex>\n</div>\n\n```\n\n#### Create our table row data component\n\nNow we are going to create a new component to handle the data, we could just dump into our page but components are great! So lets create a folder in the root of our directory `components/TableRow.js` . This will take in some props and display our customer data to the user.\n\nFirst we need to import some ChakraUI components, specifically Divider, Stack, Text, Box.\n\n```javascript\n// components/TableRow.js\n\nimport { Divider, Stack, Text, Box } from \"@chakra-ui/core\";\n\nexport default function TableRow({}) {\n  return <div></div>;\n}\n```\n\nNow we need to put in our props, the props will be creditCard, firstName, lastName,telephone which will be passed from our data we request from FaunaDB.\n\n```javascript\nimport { Divider, Stack, Text, Box } from \"@chakra-ui/core\";\n\nexport default function TableRow({\n  creditCard,\n  firstName,\n  lastName,\n  telephone,\n}) {\n  return (\n...\n```\n\nNow we have props to play with lets create our UI, now each one of the elements above is going to use the same structure. Each Text element will contain one of the props, and we will surround them with a Stack and a Box, then a divider to seperate them for example :\n\n```javascript\n<Stack isInline>\n        <Box>\n          <Text fontsize=\"lg\" my={4} mx={4}>\n            {firstName} {lastName}\n          </Text>\n        </Box>\n      </Stack>\n     <Divider border=\"4px\" />\n```\n\nSo when we get finished we out CustomerData component it will look like the following:\n\n```javascript\nimport { Divider, Stack, Text, Box } from \"@chakra-ui/core\";\n\nexport default function CustomerData({\n  creditCard,\n  firstName,\n  lastName,\n  telephone,\n}) {\n  return (\n    <Box>\n      <Stack isInline>\n        <Box>\n          <Text fontsize=\"lg\" my={4} mx={4}>\n            {firstName} {lastName}\n          </Text>\n        </Box>\n      </Stack>\n      <Divider border=\"4px\" />\n      <Stack isInline>\n        <Box>\n          <Text fontsize=\"lg\" my={4} mx={4}>\n            {telephone}\n          </Text>\n        </Box>\n      </Stack>\n      <Divider border=\"4px\" />\n      <Stack isInline>\n        <Box>\n          <Text fontsize=\"lg\" my={4} mx={4}>\n            {creditCard}\n          </Text>\n        </Box>\n      </Stack>\n      <Divider border=\"4px\" />\n    </Box>\n  );\n}\n```\n\n#### Using our new component\n\nSo now we have created a component we can import this into our application and start using it to display our data. Head back to your index.js file and at the top import the component by using `import CustomerData from \"../components/CustomerData\"; `\n\nThen in between the Stack and Flex we created we are going to map over our data, and return it to the user.\n\n```javascript\n// if data has a length\n{\n  data.length > 0 ? (\n    // then we can map over the data.\n    data.map((d) => (\n      //for each one lets return our customerData\n      <CustomerData\n        key={d.data.telephone}\n        creditCard={d.data.creditCard.number}\n        firstName={d.data.firstName}\n        lastName={d.data.lastName}\n        telephone={d.data.telephone}\n      />\n    ))\n  ) : (\n    // if there is no data return the loading screen.\n    <>\n      <Text>Loading</Text>\n    </>\n  );\n}\n```\n\nYour index.js should look like this:\n\n```javascript\nimport { useEffect, useState } from \"react\";\nimport CustomerData from \"../components/CustomerData\";\nimport {\n  Heading,\n  Flex,\n  Stack,\n  Box,\n  Button,\n  Text,\n  Input,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Radio,\n} from \"@chakra-ui/core\";\nexport default function Home() {\n  const [data, setData] = useState([]);\n\n  async function getData() {\n    const res = await fetch(\"/api/getCustomers\");\n    const newData = await res.json();\n    setData(newData);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return (\n    <Box>\n      <Heading as=\"h1\" my={2} textAlign=\"center\">\n        NextJS, FaunaDB and Servrless\n      </Heading>\n      <Heading as=\"h3\" my={2} textAlign=\"center\">\n        Customer data\n      </Heading>\n      <Flex mt={12} align=\"center\" justify=\"center\">\n        <Stack>\n          <Heading mb={6} as=\"h4\">\n            Name:\n          </Heading>\n          <Heading mb={6} as=\"h4\">\n            Phone:\n          </Heading>\n          <Heading mb={6} as=\"h4\">\n            Credit Card:\n          </Heading>\n        </Stack>\n        {data.length > 0 ? (\n          data.map((d) => (\n            <CustomerData\n              key={d.data.telephone}\n              creditCard={d.data.creditCard.number}\n              firstName={d.data.firstName}\n              lastName={d.data.lastName}\n              telephone={d.data.telephone}\n            />\n          ))\n        ) : (\n          <>\n            <Text>Loading</Text>\n          </>\n        )}\n      </Flex>\n    </Box>\n  );\n}\n```\n\nNow if we launch our code, you will see a table with our customer data!\n\n![2020-10-15 11_48_48-Window.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1602776956701/N0DVB4_CR.png)\n\nAt this point you have successfully retrieve data from a database, and displayed it to your user. What happens if we want a new customer?\n\n### Adding a new customer\n\nTo add a new customer we are going to create another serverless function and a form for them to input their data.\n\nLets tackle the serverless function first and then add our form and data needed.\n\n#### newCustomer Serverless function\n\nThe newCustomer serverless function is going to take in the body of the request, which will contain our form data. It will then update the collection with the data, and return a 200 for a successful add and a 500 for anything else.\n\nGo ahead and create a new folder in your api directory called `newCustomer` and inside that folder create an `index.js`, below is the starter code that looks exactly the same as your previous one:\n\n```javascript\nconst faunadb = require(\"faunadb\");\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\nconst q = faunadb.query;\nconst client = new faunadb.Client({ secret });\n\nmodule.exports = async (req, res) => {};\n```\n\nNow lets get to the new stuff, first we are going to take the `req.body.data` that will come from our front end and pass that down in a query.\n\n```javascript\nconst faunadb = require(\"faunadb\");\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\nconst q = faunadb.query;\nconst client = new faunadb.Client({ secret });\n\nmodule.exports = async (req, res) => {\n  const formData = req.body.data;\n\n  try {\n...\n```\n\nThen we start our query the same way `const dbs = await client.query(` and then we use the q.Create, which adds a new document and we specify our customer collection. When we add the code it will look like this:\n\n```javascript\nconst faunadb = require(\"faunadb\");\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\nconst q = faunadb.query;\nconst client = new faunadb.Client({ secret });\n\nmodule.exports = async (req, res) => {\n  const formData = req.body.data;\n\n  try {\n      const dbs = await client.query(\n      q.Create(q.Collection(\"customers\"), {\n...\n```\n\nNow all we have to do is add our data, now if you look at your collection in the database it has the following fields:\n\n- firstName\n- secondName\n- address object\n- phone number\n- credit card object.\n\nSo we can add all of those by using the data object, using the formData that we will come from the body as part of the request:\n\n```javascript\n data: {\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          address: {\n            street: formData.streetAddress,\n            city: formData.city,\n            state: formData.state,\n            zipCode: formData.zipCode,\n          },\n          telephone: formData.phoneNumber,\n          creditCard: {\n            network: formData.cardType,\n            number: formData.cardNumber,\n          },\n}\n```\n\nWhen we put this all together we get the following serverless function:\n\n```javascript\nconst faunadb = require(\"faunadb\");\n\nconst secret = process.env.FAUNADB_SECRET_KEY;\nconst q = faunadb.query;\nconst client = new faunadb.Client({ secret });\n\nmodule.exports = async (req, res) => {\n  const formData = req.body.data;\n\n  try {\n    const dbs = await client.query(\n      q.Create(q.Collection(\"customers\"), {\n        data: {\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          address: {\n            street: formData.streetAddress,\n            city: formData.city,\n            state: formData.state,\n            zipCode: formData.zipCode,\n          },\n          telephone: formData.phoneNumber,\n          creditCard: {\n            network: formData.cardType,\n            number: formData.cardNumber,\n          },\n        },\n      })\n    );\n    res.status(200).json(dbs.data);\n  } catch (e) {\n    res.status(500).json({ error: e.message });\n  }\n};\n```\n\n### Adding a customer in our index.js\n\nWith this new serverless function we can now update our database using a customer form. We are going to need a form, a way to handle changes and submission. Lets begin by building out our form, we are going to need a text field for every piece of our submission except our CardType we can make it a radio button.\n\nUnderneath the closing Flex tag add another Heading and then another Flex with align and justify center attached. Then create a form tag, so your code should now look like\n\n```javascript\nimport { useEffect, useState } from \"react\";\nimport CustomerData from \"../components/CustomerData\";\nimport {\n  Heading,\n  Flex,\n  Stack,\n  Box,\n  Button,\n  Text,\n  Input,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Radio,\n} from \"@chakra-ui/core\";\nexport default function Home() {\n  const [data, setData] = useState([]);\n\n  async function getData() {\n    const res = await fetch(\"/api/getCustomers\");\n    const newData = await res.json();\n    setData(newData);\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return (\n    <Box>\n      <Heading as=\"h1\" my={2} textAlign=\"center\">\n        NextJS, FaunaDB and Servrless\n      </Heading>\n      <Heading as=\"h3\" my={2} textAlign=\"center\">\n        Customer data\n      </Heading>\n      <Flex mt={12} align=\"center\" justify=\"center\">\n        <Stack>\n          <Heading mb={6} as=\"h4\">\n            Name:\n          </Heading>\n          <Heading mb={6} as=\"h4\">\n            Phone:\n          </Heading>\n          <Heading mb={6} as=\"h4\">\n            Credit Card:\n          </Heading>\n        </Stack>\n        {data.length > 0 ? (\n          data.map((d) => (\n            <CustomerData\n              key={d.data.telephone}\n              creditCard={d.data.creditCard.number}\n              firstName={d.data.firstName}\n              lastName={d.data.lastName}\n              telephone={d.data.telephone}\n            />\n          ))\n        ) : (\n          <>\n            <Text>Loading</Text>\n          </>\n        )}\n      </Flex>\n      <Heading as=\"h4\" mt={6} textAlign=\"center\">\n        Add a new customer\n      </Heading>\n      <Flex mt={12} align=\"center\" justify=\"center\">\n        <form></form>\n      </Flex>\n    </Box>\n  );\n}\n```\n\nWe now need to add `onSubmit={handleSubmit}` and `method=\"post\"` to the form, will will create the handleSubmit and onChange handling later. Each one of our inputs will be the following, a Form Label, and then an Input except the radio button.:\n\n```javascript\n <FormLabel htmlFor=\"firstName\">First Name</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"firstName\"\n              id=\"firstName\"\n              onChange={handleChange}\n            />\n```\n\nLets go ahead and add all of our inputs, for firstName, lastName, streetAddress, city, zip and state. Then we can create our radio buttons for Visa, Mastercard and American Express.\n\n```javascript\n\n<FormControl>\n            <FormLabel htmlFor=\"firstName\">First Name</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"firstName\"\n              id=\"firstName\"\n              onChange={handleChange}\n            />\n            <FormLabel htmlFor=\"lastName\">Last Name</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"lastName\"\n              id=\"lastName\"\n              onChange={handleChange}\n            />\n            <FormLabel htmlFor=\"streetAddress\">Street Address</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"streetAddress\"\n              id=\"streetAddress\"\n              onChange={handleChange}\n            />\n            <Stack isInline mt={2}>\n              <FormLabel htmlFor=\"city\">City</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"city\"\n                id=\"city\"\n                onChange={handleChange}\n              />\n              <FormLabel htmlFor=\"zipcode\">zipcode</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"zipcode\"\n                id=\"zipcode\"\n                onChange={handleChange}\n              />\n              <FormLabel htmlFor=\"state\">State</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"state\"\n                id=\"state\"\n                onChange={handleChange}\n              />\n            </Stack>\n            <FormLabel htmlFor=\"phoneNumber\">Phone Number</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"phoneNumber\"\n              id=\"phoneNumber\"\n              onChange={handleChange}\n            />\n```\n\nChakraUI has a Radio Group that will line up and keep your radio buttons together, so we can use that alongside our radio buttons to create a single select option.\n\n```javascript\n<RadioGroup name=\"cardType\" my={4} spacing={8} isInline>\n  <Radio onChange={handleChange} name=\"Visa\" value=\"Visa\" label=\"Visa\">\n    Visa\n  </Radio>\n  <Radio\n    onChange={handleChange}\n    name=\"Mastercard\"\n    value=\"Mastercard\"\n    label=\"Mastercard\"\n  >\n    Mastercard\n  </Radio>\n  <Radio onChange={handleChange} name=\"Amex\" value=\"Amex\" label=\"Amex\">\n    American Express\n  </Radio>\n</RadioGroup>\n```\n\nYou can this to your form, after your address, it will only allow a single selection and will be align horiziontally.\n\nFinally we need the `cardNumber` and a button to submit this so lets add those:\n\n```javascript\n<Input\n              type=\"number\"\n              name=\"cardNumber\"\n              id=\"cardNumber\"\n              onChange={handleChange}\n            />\n            <Button\n              type=\"submit\"\n              my={8}\n              ml=\"20%\"\n              width=\"50%\"\n              size=\"md\"\n              border=\"2px\"\n              borderColor=\"green.500\"\n            >\n              Add Customer\n            </Button>\n```\n\nThe full form should now look like this\n\n```javascript\n<form onSubmit={handleSubmit} method=\"post\">\n  <FormControl>\n    <FormLabel htmlFor=\"firstName\">First Name</FormLabel>\n    <Input\n      type=\"text\"\n      name=\"firstName\"\n      id=\"firstName\"\n      onChange={handleChange}\n    />\n    <FormLabel htmlFor=\"lastName\">Last Name</FormLabel>\n    <Input type=\"text\" name=\"lastName\" id=\"lastName\" onChange={handleChange} />\n    <FormLabel htmlFor=\"streetAddress\">Street Address</FormLabel>\n    <Input\n      type=\"text\"\n      name=\"streetAddress\"\n      id=\"streetAddress\"\n      onChange={handleChange}\n    />\n    <Stack isInline mt={2}>\n      <FormLabel htmlFor=\"city\">City</FormLabel>\n      <Input type=\"text\" name=\"city\" id=\"city\" onChange={handleChange} />\n      <FormLabel htmlFor=\"zipcode\">zipcode</FormLabel>\n      <Input type=\"text\" name=\"zipcode\" id=\"zipcode\" onChange={handleChange} />\n      <FormLabel htmlFor=\"state\">State</FormLabel>\n      <Input type=\"text\" name=\"state\" id=\"state\" onChange={handleChange} />\n    </Stack>\n    <FormLabel htmlFor=\"phoneNumber\">Phone Number</FormLabel>\n    <Input\n      type=\"text\"\n      name=\"phoneNumber\"\n      id=\"phoneNumber\"\n      onChange={handleChange}\n    />\n    <RadioGroup name=\"cardType\" my={4} spacing={8} isInline>\n      <Radio onChange={handleChange} name=\"Visa\" value=\"Visa\" label=\"Visa\">\n        Visa\n      </Radio>\n      <Radio\n        onChange={handleChange}\n        name=\"Mastercard\"\n        value=\"Mastercard\"\n        label=\"Mastercard\"\n      >\n        Mastercard\n      </Radio>\n      <Radio onChange={handleChange} name=\"Amex\" value=\"Amex\" label=\"Amex\">\n        American Express\n      </Radio>\n    </RadioGroup>\n    <FormLabel htmlFor=\"cardNumber\">Card Number</FormLabel>\n    <Input\n      type=\"number\"\n      name=\"cardNumber\"\n      id=\"cardNumber\"\n      onChange={handleChange}\n    />\n    <Button\n      type=\"submit\"\n      my={8}\n      ml=\"20%\"\n      width=\"50%\"\n      size=\"md\"\n      border=\"2px\"\n      borderColor=\"green.500\"\n    >\n      Add Customer\n    </Button>\n  </FormControl>\n</form>\n```\n\n### adding state, Initial form data.\n\nOur form is complete but we need some state to handle the input and also some initial data. At the top of your Home function lets add a const called `initialFormData` that is an `Object.freeze` that will handle all of our form elements.\n\n```javascript\nconst initialFormData = Object.freeze({\n  firstName: \"\",\n  lastName: \"\",\n  streetAddress: \"\",\n  city: \"\",\n  state: \"\",\n  zipCode: \"\",\n  phoneNumber: \"\",\n  cardType: \"\",\n  cardNumber: null,\n});\n```\n\nThe `Object.freeze` stops us from adding additional field properties which is great for our form as we don't want to accidentally add something our database does not currently have.\n\nThen lets add another state for our formData, `const [formData, updateFormData] = useState({});` this will be updated through our onChange and onSubmit.\n\n#### Creating our handleChange\n\nThe handleChange that we attached to our forms will update our object values based upon the name. This will just update the single field leaving the others alone:\n\n```javascript\nconst handleChange = (e) => {\n  updateFormData({\n    ...formData,\n    [e.target.name]: e.target.value,\n  });\n};\n```\n\nThis handleChange takes in what has changed, looks for the targetName in our FormData and updates it to the value we pass. Add this after your useEffect.\n\n### Creating our onSubmit\n\nOur onSubmit will take the formData and submit it our API, but first lets create a method that calls our API. When using fetch with POST we need our request options, and I personally like to keep them as separate variable, we are going to need the method, header for content type and finally the formData stringified nicely for our API.\n\n```javascript\nconst requestOptions = {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({ data: formData }),\n};\n```\n\nNow we've added a requestOptions variable, we can create a addCustomer function that makes the API call, and if it is successful we will make a call to our `getData()` so we can refresh our table at the top.\n\n```javascript\nasync function addCustomer() {\n  await fetch(\"api/newCustomer\", requestOptions)\n    .then(() => getData())\n    .catch((e) => console.log(e));\n}\n```\n\nOur Form is complete your full `index.js` should look like below:\n\n```javascript\nimport { useEffect, useState } from \"react\";\nimport CustomerData from \"../components/CustomerData\";\nimport {\n  Heading,\n  Flex,\n  Stack,\n  Box,\n  Button,\n  Text,\n  Input,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Radio,\n} from \"@chakra-ui/core\";\nexport default function Home() {\n  const initialFormData = Object.freeze({\n    firstName: \"\",\n    lastName: \"\",\n    streetAddress: \"\",\n    city: \"\",\n    state: \"\",\n    zipCode: \"\",\n    phoneNumber: \"\",\n    cardType: \"\",\n    cardNumber: null,\n  });\n\n  const [data, setData] = useState([]);\n  const [formData, updateFormData] = useState({});\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ data: formData }),\n  };\n  async function getData() {\n    const res = await fetch(\"/api/getCustomers\");\n    const newData = await res.json();\n    setData(newData);\n  }\n  async function addCustomer() {\n    await fetch(\"api/newCustomer\", requestOptions)\n      .then(() => getData())\n      .catch((e) => console.log(e));\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const handleChange = (e) => {\n    updateFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addCustomer();\n  };\n  return (\n    <Box>\n      <Heading as=\"h1\" my={2} textAlign=\"center\">\n        NextJS, FaunaDB and Servrless\n      </Heading>\n      <Heading as=\"h3\" my={2} textAlign=\"center\">\n        Customer data\n      </Heading>\n      <Flex mt={12} align=\"center\" justify=\"center\">\n        <Stack>\n          <Heading mb={6} as=\"h4\">\n            Name:\n          </Heading>\n          <Heading mb={6} as=\"h4\">\n            Phone:\n          </Heading>\n          <Heading mb={6} as=\"h4\">\n            Credit Card:\n          </Heading>\n        </Stack>\n        {data.length > 0 ? (\n          data.map((d) => (\n            <CustomerData\n              key={d.data.telephone}\n              creditCard={d.data.creditCard.number}\n              firstName={d.data.firstName}\n              lastName={d.data.lastName}\n              telephone={d.data.telephone}\n            />\n          ))\n        ) : (\n          <>\n            <Text>Loading</Text>\n          </>\n        )}\n      </Flex>\n      <Heading as=\"h4\" mt={6} textAlign=\"center\">\n        Add a new customer\n      </Heading>\n      <Flex mt={12} align=\"center\" justify=\"center\">\n        <form onSubmit={handleSubmit} method=\"post\">\n          <FormControl>\n            <FormLabel htmlFor=\"firstName\">First Name</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"firstName\"\n              id=\"firstName\"\n              onChange={handleChange}\n            />\n            <FormLabel htmlFor=\"lastName\">Last Name</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"lastName\"\n              id=\"lastName\"\n              onChange={handleChange}\n            />\n            <FormLabel htmlFor=\"streetAddress\">Street Address</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"streetAddress\"\n              id=\"streetAddress\"\n              onChange={handleChange}\n            />\n            <Stack isInline mt={2}>\n              <FormLabel htmlFor=\"city\">City</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"city\"\n                id=\"city\"\n                onChange={handleChange}\n              />\n              <FormLabel htmlFor=\"zipcode\">zipcode</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"zipcode\"\n                id=\"zipcode\"\n                onChange={handleChange}\n              />\n              <FormLabel htmlFor=\"state\">State</FormLabel>\n              <Input\n                type=\"text\"\n                name=\"state\"\n                id=\"state\"\n                onChange={handleChange}\n              />\n            </Stack>\n            <FormLabel htmlFor=\"phoneNumber\">Phone Number</FormLabel>\n            <Input\n              type=\"text\"\n              name=\"phoneNumber\"\n              id=\"phoneNumber\"\n              onChange={handleChange}\n            />\n            <RadioGroup name=\"cardType\" my={4} spacing={8} isInline>\n              <Radio\n                onChange={handleChange}\n                name=\"Visa\"\n                value=\"Visa\"\n                label=\"Visa\"\n              >\n                Visa\n              </Radio>\n              <Radio\n                onChange={handleChange}\n                name=\"Mastercard\"\n                value=\"Mastercard\"\n                label=\"Mastercard\"\n              >\n                Mastercard\n              </Radio>\n              <Radio\n                onChange={handleChange}\n                name=\"Amex\"\n                value=\"Amex\"\n                label=\"Amex\"\n              >\n                American Express\n              </Radio>\n            </RadioGroup>\n            <FormLabel htmlFor=\"cardNumber\">Card Number</FormLabel>\n            <Input\n              type=\"number\"\n              name=\"cardNumber\"\n              id=\"cardNumber\"\n              onChange={handleChange}\n            />\n            <Button\n              type=\"submit\"\n              my={8}\n              ml=\"20%\"\n              width=\"50%\"\n              size=\"md\"\n              border=\"2px\"\n              borderColor=\"green.500\"\n            >\n              Add Customer\n            </Button>\n          </FormControl>\n        </form>\n      </Flex>\n    </Box>\n  );\n}\n```\n\nGo ahead and test this, you should successfully create a new customer and your \"table\" at the top should refresh with the new data!\n\nThat is the end of the crash course!\n"},{"slug":"pick-a-language-and-do-something","category":"post","title":"Pick a language and do something","description":"I’ve heard and seen a lot of “What language should I pick first?” Questions in my time as a developer. It’s an interesting question that I seem to have the opposite response to most.","tags":["coding","tutorial"],"body":"\nI’ve heard and seen a lot of “What language should I pick first?” Questions in my time as a developer. It’s an interesting question that I seem to have the opposite response to most. Usually you here, learn Python as it’s syntax is simple to learn, or JavaScript because it is in demand and everyone wants to hire you. The answer is simple pick a language out of a hat and jump in.\n\nPersonally I started with Java and spent about 2-3 years crafting my skills, I was working at a company in technical support and they offered me as a Junior developer during the first 6-8 months of those 2-3 years. I would say I was an expert at that point but I certainly knew plenty to support senior engineers and teach some of it to my peers.\nIf I was to tell you to learn Java today, people would cry and moan about how Java is much harder to learn then Python! Why would tell someone to learn that first! Who gives a shit, honestly I could tell you to learn COBOL which is huge in the financial industry but you will probably question why I told you that.\n\nMy point is this, programming is about passion, and finding something that you love to work at for months without thinking about when am I going to get paid! My love of Java still flows today, I spent almost 9 years writing lines of Java and recently started a new job where I don’t write Java anymore. I still keep up with the latest versions of Java, the latest bugs, features etc. I wrote Python for about 3 months for a job, I had no experience but once you have learnt the basics of programming, its more about learning the syntax differences. Once I finished the consultation and job, I never ever learnt another thing about it because it didn’t excite me.\nProgramming is like sports, there are plenty of different options but at the end of the day the one that interests you the most is the one you will stick with. So if you ask me what language to start with, the answer is simple “ Go read a few docs and blog posts about a language, read another language compare them. Choose one and stick it out for a minimum of a year, Go slow be patient and try everyday!”\n"},{"slug":"roll-your-tweet-is-live","category":"post","title":"Roll Your Tweet Is Live!","description":"Roll your Tweet my microsaas is now live!","tags":["saas","projects"],"body":"\nToday is the day! Roll Your Tweet is live!\n\n## What is Roll Your Tweet?\n\nRoll your tweet is a SaaS that allows you to turn a twitter thread into a blog post. You can even share on your favorite platforms such as Hashnode or Medium. I built this solo in about 30 days (blog post to come soon)\n\n## How does it work?\n\n1. Select Twitter thread or tweet from your page:\n\n![Choose your tweet.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633651652741/A7QN9Fowp.png)\n\n2. Add any content that you want using our Markdown editor:\n\n![Roll Your Tweet editor.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633651689815/WlzAFrupM.png)\n\n3. Select the platforms you want to share to and increase your impact.\n\n### What is coming in the future?\n\nI am working on Wordpress integrations and the ability to turn your awesome blog posts into high impact Twitter threads allowing you to get your content in front of more people.\n"},{"slug":"ssg-vs-srr","category":"post","title":"SSG VS SSR","description":"The words SSG and SSR get tossed about so frequently in the JAMStack world, today we are going to look at what they mean and what they do","tags":["ssg","ssr","nextjs"],"body":"\nWhen your first start working in the JAMStack or any web development for that matter, one thing you notice is there are a lot of acronyms thrown about. We have SSG, ISG, SSR, SWR and so much more, so today we are going to look at SSG and SSR.\n\n## What is SSG?\n\nSSG or Server Side Generation enables developers to create static pages, whether the data is completely static, as in you manually create a full page with all the details hard coded or you have dynamic data that you plugin into a template.\n\n### How does SSG Work?\n\nSSG is created a build time, this means build could be potentially slower than you are used to but when a user lands on your site, its _blazing_ fast because everything has been created and is just a file served up. You could think of SSG as a Car dealership:\n\n- You have a car dealership, and they have 100s of cars for sale.\n- You go to the dealership and you pick out a car you want.\n- The car is ready to go, you don't have to wait for it to be built.\n- You drive off the lot and you are on your way.\n\n## What is SSR?\n\nSSR or Server Side Rendering has been popular for years, but recently it has been gaining a lot of traction in the JavaScript space. Unlike SSG, SSR dynamically populates a page when the user requests it.\n\n### How does SSR work?\n\nSSR as I explained in the quick summary above, it dynamically populates the page as a user requests it versus being populated at build time.For example if a user navigates to /blog/ssr-is-cool then the server will render the blog post and return it to the user. This is great for the user if they want the \"freshest\" data as they land on the site, but it is not great for the developer if they want to make the site faster. You can think of SSR as Tesla versus a car dealership:\n\n- You have a Tesla dealership, and they have a few different models for sale.\n- You decide to go to the Tesla dealership and you pick out a car you want.\n- You tell the dealership I want a Model X, and they start building it.\n- The car is not ready to go, you have to wait for it to be built.\n- The car gets built and is sent to your house.\n\nI hope this extremely brief explantion of SSG and SSR will help you the next time you are building a projectin the JAMStack! Make sure to drop me a comment below if you have any questions!\n"},{"slug":"why-flag-parameters-suck","category":"post","title":"Why flag parameters suck","description":"When coding people tend to use flag parameters to drive their functions, without considering that they absolutely suck! They cause more trouble when a you write complex functions or a codebase that is large in nature, because the readability is just terrible let me explain.","tags":["javascript","thoughts","tips"],"body":"\nWhen coding people tend to use flag parameters to drive their functions, without considering that they absolutely suck! They cause more trouble when a you write complex functions or a codebase that is large in nature, because the readability is just terrible let me explain.\n\n## What is a flag parameter?\n\nA flag parameter is a Boolean that drives a function, for example:\n\n```js\nfunction register(user, isAdmin) {\n  if (isAdmin) {\n    // give admin privs\n  } else {\n    //Give standard privs\n  }\n}\n\nregister(user, true);\n```\n\nThe problem when using a flag parameter you lose context behind the parameter and another developer has to read through the full function before understanding what `isAdmin` is for. Now imagine that this function is complex making it hard to follow.\n\n## What is the alternative?\n\nThere are some alternatives to this issue but I prefer two options.\n\n### Create distinct functions\n\nThe first option create two functions that separate the flag, so taking above we can create:\n\n```js\nfunction registerAdmin(user) {\n  // do admin privs\n}\n\nfunction registerUser(user) {\n  // give standard pribs\n}\n\nregisterAdmin(user);\nregisterUser(user);\n```\n\nNow we have very distinct functions and based just upon the name we know exactly what is happening in the functions.\n\n### Using an options parameter\n\nThe second option, to use an options parameter that holds all the different parameters that drive the functions:\n\n```js\nfunction register(user, options){\n\tif(options.admin){\n\t// do admin privs\n}\nelse{\n\t//Give standard privs\n}\n}\n\nregister(user, options:{\"admin\" : true})\n```\n\nThis option allows you to see what is driving the function without needing to read a full function, you can see there are extra options and are they an admin or not.\n"},{"slug":"why-i-created-developers-hangout-podcast","category":"post","title":"Why I created Developers Hangout podcast.","description":"Last month I created a new podcast / livestream called Developers Hangout which is a weekly livestreamed podcast where I hangout with guests and chat for 90 minutes. I thought now would be the time to how this ended up happening and why.","tags":["podcast","projects"],"body":"\nLast month I created a new podcast / livestream called Developers Hangout which is a weekly livestreamed podcast where I hangout with guests and chat for 90 minutes. I thought now would be the time to how this ended up happening and why.\n\n## Developers are humans.\n\nI have been in the industry for 12 almost 13 years, and one thing I've noticed working in multiple segments of our industry is almost everything we talk about is code or code related. Don't believe me? Just go on Twitter, Tech-tok , Discord, LinkedIn or around your office and see what everyone is chatting about.\n\nWe are humans and this often gets lost when talking to people in the space, it's always what's the latest framework fad or cool new innovation ( I am looking at you GitHub copilot). We have hobbies outside of coding, none of us are coding from the minute our eyes open to the minute they close. We might workout, game, make fancy coffee or dinners, so why aren't we talking about it?\n\n## Developers Hangout was born\n\nI reached out to a bunch of different developers, some I knew and some I had never talked to outside of a twitter interaction and said \"Wanna hangout for 90 minutes and just chat? I am thinking of doing a livestreamed podcast where we can talk about a small amount of tech but then I wanna know about hobbies, shows, things you are doing that aren't tech\". The reactions were extremely positive, people were dying to talk about things that weren't related to the latest package, role, or content they are created.\n\nSo far in the 4 episodes we've talked about interesting topics such as :\n\n- Lifting a truck\n- Rock Climbing\n- Tik Tok\n- Top 3 Anime shows\n- Worst jobs we've had\n- Marriage, Immigration, kids\n- Buying a house\n  and so much more.\n\nWhen I fire up the stream on Thursdays its a breath of fresh air where I get to become just a regular guy with a camera and a microphone talking to someone about everything.\n\n### Where and how can you watch / listen?\n\nDevelopers Hangout is on any [podcast provider](https://anchor.fm/developershangout) you want, just search \"Developers Hangout\". If you want to join live, you can catch it on [https://twitch.tv/jamesperkins](https://twitch.tv/jamesperkins) every Thursday at 3.30pm EST and if you want to watch but can't catch it live, check it out on my [YouTube channel](https://youtube.com/c/learntocodewithjames)\n"}]